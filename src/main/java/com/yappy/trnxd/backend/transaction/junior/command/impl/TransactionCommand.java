package com.yappy.trnxd.backend.transaction.junior.command.impl;import com.yappy.trnxd.backend.transaction.junior.command.CommonCommand;import com.yappy.trnxd.backend.transaction.junior.model.RequestDTO;import com.yappy.trnxd.backend.transaction.junior.model.ResponseDTO;import com.yappy.trnxd.backend.transaction.junior.model.StatusDTO;import com.yappy.trnxd.backend.transaction.junior.model.TransactionRequestDTO;import com.yappy.trnxd.backend.transaction.junior.model.TransactionResponseDTO;import com.yappy.trnxd.backend.transaction.junior.util.TransactionUtil;import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Component;@Component@Qualifier("transactionCommand")public class TransactionCommand implements CommonCommand<RequestDTO<TransactionRequestDTO>, ResponseDTO<TransactionResponseDTO>> {    private static final String COMMAND_NAME = "transactionCommand";    @Override    @CircuitBreaker(name = COMMAND_NAME, fallbackMethod = "executeFallback")    public ResponseDTO<TransactionResponseDTO> execute(RequestDTO<TransactionRequestDTO> request) {        var response = new ResponseDTO<TransactionResponseDTO>();        try {            var transaction = new TransactionResponseDTO();            transaction.setId(TransactionUtil.generateTransactionUUID());            transaction.setType(request.getBody().getType());            transaction.setStatus(request.getBody().getStatus());            transaction.setCreatedAt(request.getBody().getCreatedAt());            transaction.setUpdatedAt(request.getBody().getUpdatedAt());            response.setBody(transaction);            response.setStatus(new StatusDTO("200", "Transaction successful"));        } catch (Exception e) {            response.setStatus(new StatusDTO("500", "Transaction failed"));        }        return response;    }    @Override    public Throwable executeFallback(RequestDTO<TransactionRequestDTO> request) {        return new RuntimeException("Failed to send transaction");    }}